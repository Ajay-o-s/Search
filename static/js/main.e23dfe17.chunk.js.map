{"version":3,"sources":["reducer.js","StateProvider.js","Search.js","Home.js","Load.js","useGoogleSearch.js","SearchPage.js","App.js","serviceWorker.js","index.js"],"names":["actionTypes","reducer","state","action","console","log","type","term","StateContext","createContext","StateProvider","initialState","children","Provider","value","useReducer","useStateValue","useContext","Search","hideButtons","dispatch","useState","input","setInput","history","useHistory","search","e","preventDefault","push","className","onChange","target","Button","onClick","variant","Home","to","Avatar","src","alt","Loader","done","useGoogleSearch","data","setData","useEffect","url","a","fetch","then","response","json","result","fetchData","SearchPage","organic_results","map","title","snippet","href","App","appLoaded","setAppLoaded","startLoadProgress","setStartLoadProgress","stopLoad","setTimeout","path","Load","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"+aAIaA,EACQ,kBAmBNC,EAfD,SAACC,EAAMC,GAEjB,OADAC,QAAQC,IAAIF,GACLA,EAAOG,MACX,KAAKN,EACA,OAAO,2BACAE,GADP,IAEIK,KAAMJ,EAAOI,OAGrB,QACI,OAAOL,IClBNM,EAAeC,0BAEfC,EAAe,SAAC,GAAD,IAAET,EAAF,EAAEA,QAAQU,EAAV,EAAUA,aAAaC,EAAvB,EAAuBA,SAAvB,OACxB,kBAACJ,EAAaK,SAAd,CAAuBC,MAAOC,qBAAWd,EAAQU,IAC5CC,IAGII,EAAgB,kBAAMC,qBAAWT,ICwC/BU,MAvCf,YAAsC,IAAD,IAApBC,mBAAoB,WACbH,IADa,yCACvBI,EADuB,OAEVC,mBAAS,IAFC,mBAE1BC,EAF0B,KAEpBC,EAFoB,KAG3BC,EAAUC,cAEVC,EAAO,SAAAC,GACTA,EAAEC,iBACFxB,QAAQC,IAAI,eAAeiB,GAC3BF,EAAS,CACLd,KAAKN,EACLO,KAAKe,IAGTE,EAAQK,KAAK,YAGjB,OACI,0BAAMC,UAAU,UAChB,yBAAKA,UAAU,iBACf,kBAAC,IAAD,CAAYA,UAAU,sBACtB,2BAAOhB,MAAOQ,EAAOS,SAAU,SAAAJ,GAAC,OAAEJ,EAASI,EAAEK,OAAOlB,UACpD,kBAAC,IAAD,OAGEK,EAKE,yBAAKW,UAAU,mBACf,kBAACG,EAAA,EAAD,CAAQH,UAAU,wBAAyBxB,KAAK,SAAS4B,QAASR,EAAQS,QAAQ,YAAlF,gBACA,kBAACF,EAAA,EAAD,CAAQH,UAAU,wBAAyBK,QAAQ,YAAnD,uBANJ,yBAAKL,UAAU,mBACX,kBAACG,EAAA,EAAD,CAAQ3B,KAAK,SAAS4B,QAASR,EAAQS,QAAQ,YAA/C,gBACA,kBAACF,EAAA,EAAD,CAAQE,QAAQ,YAAhB,yBCMGC,MAlCf,WACI,OACI,yBAAKN,UAAU,QAEf,yBAAKA,UAAU,gBACd,yBAAKA,UAAU,oBACb,kBAAC,IAAD,CAAMO,GAAG,UAAT,SACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,UAGF,yBAAKP,UAAU,qBACf,kBAAC,IAAD,CAAMO,GAAG,UAAT,SACA,kBAAC,IAAD,CAAMA,GAAG,WAAT,UACA,kBAAC,IAAD,MACA,kBAACC,EAAA,EAAD,QAMD,yBAAKR,UAAU,cACf,yBAAKS,IAAI,kBAAkBC,IAAI,KAC/B,yBAAKV,UAAU,wBACf,kBAAC,EAAD,CAAQX,aAAW,QCnBZsB,G,MATA,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACjB,OACC,yBAAKZ,UAAU,UACd,yBAAKA,UAAS,2BAAsBY,EAAO,yBAA2B,MACtE,wBAAIZ,UAAU,YAAd,gB,iCC+BYa,EAhCS,SAACpC,GAAU,IAAD,EACPc,mBAAS,MADF,mBACvBuB,EADuB,KAClBC,EADkB,KA6B/B,OApBAC,qBAAU,WACN1C,QAAQC,IAAIE,GACZ,IACMwC,EAAM,8FAAyExC,EACrFH,QAAQC,IAAI0C,GAGG,uCAAG,sBAAAC,EAAA,sDAEdC,MAAMF,GACLG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACFR,EAAQQ,MALE,2CAAH,oDAUfC,KACF,CAAC/C,IAEI,CAAEqC,SCcGW,MA5Cf,WAAuB,IAAD,EAEMvC,IAFN,mBAEVT,EAFU,KAEVA,KACAqC,GAHU,KAGDD,EAAgBpC,GAAzBqC,MAGR,OADAxC,QAAQC,IAAIuC,GAGR,yBAAKd,UAAU,cAEX,yBAAKA,UAAU,sBACf,4BAAKvB,IAGL,yBAAKuB,UAAU,uBAEL,MAANc,EACI,0CACC,6BACVA,EAAKY,gBAAgBC,KAAI,gBAAEC,EAAF,EAAEA,MAAMX,EAAR,EAAQA,IAAIY,EAAZ,EAAYA,QAAZ,OACtB,6BACI,4BAAKD,GACL,uBAAGE,KAAMb,EAAKf,OAAO,SAAUe,GAC/B,2BAAIY,WCcPE,MAhCf,WAAgB,IAAD,EAEqBxC,oBAAS,GAF9B,mBAENyC,EAFM,KAEKC,EAFL,OAGoC1C,oBAAS,GAH7C,mBAGP2C,EAHO,KAGYC,EAHZ,KAIdnB,qBAAU,WAAOoB,MAAc,IAC/B,IAAMA,EAAW,WAChBD,GAAqB,GACrBE,YAAW,kBAAMJ,GAAa,KAAO,MAEtC,OAAKD,EAEF,yBAAKhC,UAAU,OAEb,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOsC,KAAK,WACX,kBAAC,EAAD,MACA,kBAAC,EAAD,OAED,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,UAXY,kBAACC,EAAD,CAAQ3B,KAAMsB,KCPlBM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCPNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACD,kBAAC,EAAD,CAAelE,aTbU,CACtBJ,KAAM,MSYkCN,QAASA,GACjD,kBAAC,EAAD,QAIF6E,SAASC,eAAe,SDiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlF,QAAQkF,MAAMA,EAAMC,c","file":"static/js/main.e23dfe17.chunk.js","sourcesContent":["export const initialState={\n    term: null,\n\n};\nexport const actionTypes ={\n    SET_SEARCH_TERM: \"SET_SEARCH_TERM\",\n};\n\n\nconst reducer=(state,action)=>{\n    console.log(action);\n    switch(action.type) {\n       case actionTypes.SET_SEARCH_TERM:\n            return  {\n                ...state,\n                term: action.term,\n            };\n            \n        default:\n            return state;\n    }\n\n};\n\nexport default reducer;","import React,{createContext,useContext,useReducer} from \"react\";\nexport const StateContext = createContext();\n\nexport const StateProvider =({reducer,initialState,children})=>(\n    <StateContext.Provider value={useReducer(reducer,initialState)}>\n        {children}\n    </StateContext.Provider>\n);\nexport const useStateValue = () => useContext(StateContext);","import React , {useState} from 'react';\nimport \"./Search.css\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport MicIcon from \"@material-ui/icons/Mic\";\nimport {Button} from \"@material-ui/core\";\nimport { useHistory } from 'react-router-dom';\nimport {actionTypes} from \"./reducer\";//used inside the pages\nimport {useStateValue} from \"./StateProvider\";\n\nfunction Search({hideButtons=false}) {\n    const [{},dispatch]=useStateValue();\n    const [input,setInput]=useState('');\n    const history = useHistory();\n    \n    const search=e=>{\n        e.preventDefault();\n        console.log(\"you searched\",input);\n        dispatch({\n            type:actionTypes.SET_SEARCH_TERM,\n            term:input,\n        })\n\n        history.push('/search')\n    }\n    \n    return (\n        <form className=\"search\">\n        <div className=\"search__input\">\n        <SearchIcon className=\"search__inputIcon\" />\n        <input value={input} onChange={e=>setInput(e.target.value)} />\n        <MicIcon />\n\n        </div>\n        {!hideButtons ? (\n        <div className=\"search__buttons\">\n            <Button type=\"submit\" onClick={search} variant=\"outlined\">Gogle Search</Button>\n            <Button variant=\"outlined\">I am feeling lucky</Button>\n        </div>):(\n            <div className=\"search__buttons\">\n            <Button className=\"search__buttonsHidden\"  type=\"submit\" onClick={search} variant=\"outlined\">Gogle Search</Button>\n            <Button className=\"search__buttonsHidden\"  variant=\"outlined\">I am feeling lucky</Button>\n        </div>\n        )}\n            \n        </form>\n    )\n}\n\nexport default Search\n\n","import React from 'react';\nimport \"./Home.css\";\nimport { Link } from \"react-router-dom\";\nimport AppsIcon from \"@material-ui/icons/Apps\";\nimport { Avatar } from \"@material-ui/core\";\nimport Search from \"./Search\";\n\n\nfunction Home() {\n    return (\n        <div className=\"home\">\n        \n        <div className=\"home__header\">\n         <div className=\"home__headerLeft\">\n           <Link to=\"/about\">About</Link>\n           <Link to=\"/store\">Store</Link>\n\n         </div>\n         <div className=\"home__headerRight\">\n         <Link to=\"/gmail\">Gmail</Link>\n         <Link to=\"/images\">Images</Link>\n         <AppsIcon />\n         <Avatar />\n             \n         </div>\n\n\n        </div>\n        <div className=\"home__body\">\n        <img src=\"./blacksudo.svg\" alt=\"\"></img>\n        <div className=\"home__inputContainer\">\n        <Search hideButtons />\n\n        </div>\n         \n\n        </div>\n            \n        </div>\n    )\n}\n\nexport default Home","import React from \"react\";\nimport \"./loader.css\";\n\nconst Loader = ({ done }) => {\n\treturn (\n\t\t<div className=\"loader\">\n\t\t\t<div className={`loader__progress ${done ? \"loader__progress--done\" : \"\"}`} />\n\t\t\t<h1 className=\"loader_2\"> Ajay o s</h1>\n\t\t</div>\n\t);\n};\n\nexport default Loader;\n","import {useState,useEffect} from 'react';\n//import API_KEY from \"./pages/keys\";\n\n\n\n//custom hook -we are creating\nconst useGoogleSearch = (term) => {\n    const [data,setData] = useState(null);\n    \n    {/*\n   const [data,setData] = useState(null);const API_KEY = \"d259da8dd0fbd188d18c2688a790350b\";\n   let url = \"http://api.serpstack.com/search?access_key=\"+API_KEY+\"&type=web&query=\"+term;\n   console.log(url);\n    */}\n\n   useEffect(()=>{\n       console.log(term);\n       const API_KEY = \"d259da8dd0fbd188d18c2688a790350b\";\n       const url = \"http://api.serpstack.com/search?access_key=\"+API_KEY+\"&type=web&query=\"+term;\n       console.log(url);\n\n\n       const fetchData = async()=>{\n            \n           fetch(url)\n           .then(response => response.json())\n           .then(result=>{\n               setData(result)\n               //console.log(result);\n           })\n           \n       }\n       fetchData();\n   },[term])\n  \n   return { data };\n};\n\nexport default useGoogleSearch;\n//data layer variable","import React from 'react';\n\nimport { useStateValue } from \"./StateProvider\";\nimport useGoogleSearch from \"./useGoogleSearch\";\n\nfunction SearchPage() {\n    \n    const [{term},dispatch]=useStateValue();\n    const { data } = useGoogleSearch(term);\n\n    console.log(data);\n    return (\n       \n        <div className=\"searchPage\">\n            \n            <div className=\"searchPage__header\">\n            <h1>{term}</h1>\n\n            </div>\n            <div className=\"searchPage__results\">\n            {\n                data==null ? (\n                    <h1>loading...</h1>\n                ):   <div>\n          {data.organic_results.map(({title,url,snippet})=>(\n              <div>  \n                  <h1>{title}</h1>\n                  <a href={url} target=\"blank\" >{url}</a>\n                  <p>{snippet}</p>\n              </div>\n          ))}\n            \n        </div>\n            }\n        \n         \n               {/*\n                data.organic_results.forEach(res =>{\n      result = `\n      <h1>${res.title}</h1>\n      <a href=\"${res.url}\" target=\"_blank\">${res.url}</a>\n     \n      <p>${res.snippet}</p>\n              */}\n            </div>\n        </div>\n    )\n}\n\nexport default SearchPage","import React, { useEffect, useState } from \"react\";\nimport Home from \"./Home\";\nimport Loader from \"./Load\";\nimport {BrowserRouter as Router ,Switch,Route } from \"react-router-dom\";\nimport './App.css';\n//import Search from './pages/Search';\nimport SearchPage from \"./SearchPage\";\nimport SearchPageTest from './SearchPageTest';\nimport Search from './Search';\n\nfunction App() {\n\n  const [appLoaded, setAppLoaded] = useState(false);\n\tconst [startLoadProgress, setStartLoadProgress] = useState(false);\n\tuseEffect(() => {stopLoad();}, []);\n\tconst stopLoad = () => {\n\t\tsetStartLoadProgress(true);\n\t\tsetTimeout(() => setAppLoaded(true), 3000);\n\t};\n\tif (!appLoaded) return <Loader done={startLoadProgress} />;\n  return (\n    <div className=\"app\">\n     \n      <Router>\n        <Switch>\n          <Route path=\"/search\">\n           <Search />\n           <SearchPage />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </Router>\n    \n    \n   \n     \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reducer,{initialState} from \"./reducer\";\nimport {StateProvider} from \"./StateProvider\"; \n\n\n//wrap the app inside the state provider;\n\nReactDOM.render(\n  <React.StrictMode>\n <StateProvider initialState={initialState} reducer={reducer} >\n    <App />\n    </StateProvider> \n   \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}